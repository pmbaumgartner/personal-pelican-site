<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peter Baumgartner - Blog</title><link href="/" rel="alternate"></link><link href="/feeds/blog.atom.xml" rel="self"></link><id>/</id><updated>2016-09-17T08:42:00-04:00</updated><entry><title>PyData Carolinas Recap &amp; Presentation Reflection</title><link href="/pydata-carolinas-recap.html" rel="alternate"></link><published>2016-09-17T08:42:00-04:00</published><updated>2016-09-17T08:42:00-04:00</updated><author><name>Peter Baumgartner</name></author><id>tag:None,2016-09-17:/pydata-carolinas-recap.html</id><summary type="html">&lt;p&gt;Recap of my experience as an atendee and speaker at the first PyData Carolinas conference&lt;/p&gt;</summary><content type="html">&lt;h2&gt;PyData Carolinas Recap &amp;amp; Presentation Reflection&lt;/h2&gt;
&lt;p&gt;I was fortunate enough this year to attend the first PyData Carolinas conference, though my attendance was only made possible with the development and delivery of a tutorial talk. My colleague Rob and I proposed and then delivered a 90m tutorial talk on using NetworkX to do Social Network Analysis in Python (&lt;a href="https://github.com/rtidatascience/connected-nx-tutorial"&gt;repo&lt;/a&gt;, video coming soon). The talk was aimed at intermediate users of python with some experience with data and the python language. Preparing the talk was quite the adventure -- there are a lot of things to plan for and at the end of the day there's always something to forget about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What went well:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Full house! We had a full and captive audience, which was great for the first tutorial of the conference &lt;a href="https://twitter.com/GinnyGhezzo/status/776046158665781248"&gt;at 9am&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our room host, Ginny, was fantastic! And so was our AV guy Doug!&lt;/li&gt;
&lt;li&gt;People seemed to be interested in the topic -- one woman mentioned during the closing statements that she was excited to apply the social network stuff she had learned&lt;/li&gt;
&lt;li&gt;Lots of laughs from the terrible jokes we made&lt;/li&gt;
&lt;li&gt;Interesting follow-up conversations and questions after the talk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Improvement Areas &amp;amp; Future Ideas&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since it was a &lt;em&gt;tutorial&lt;/em&gt; and not simply a &lt;em&gt;talk&lt;/em&gt;, my philosophy was that it was necessary to delve into more of the technical details and code. I think some of the code presented was probably unnecessary or could be added to supplementary materials.&lt;/li&gt;
&lt;li&gt;In the future, I think a good solution may be to build a package specifically for a tutorial. In this package I'd probably hide all the helper functions (basically transforming data structure A to data structure B) in a module to load in and not necessarily cover them in a presentation.&lt;/li&gt;
&lt;li&gt;I thought converting our notebooks to slides was a great way to present high-level and technical detail information. We had some issues with a smaller screen than I expected and some people had a hard time reading the code slides in the back of the room. When viewing slides on NBviewer, the browser zoom doesn't increase the cell size, so I ended up plowing through the notebooks themselves (which I could zoom in on) rather than the slides.&lt;/li&gt;
&lt;li&gt;Next time I've got to think about a better way to present code -- perhaps screenshots? There's still a weird area between putting code in notebooks, not inducing a lot of friction to convert them to slides, having code slides be viewable in a presentation, and allowing a user to execute the code that I'm trying to figure out the sweet spot for.&lt;/li&gt;
&lt;li&gt;Some audience members didn't get the original link to the repository to execute the code themselves, though we did cover it at the beginning I think we started early or some people were late.&lt;/li&gt;
&lt;li&gt;I think the first slide in future presentations will just be the link to the repo, and I can pass off all the installation instructions to the README there.&lt;/li&gt;
&lt;li&gt;Also, sharing the repo via social media ended up being a big help in getting materials into the audience's hands. Thankful for our host Ginny to have the foresight to do that! Next time I'll have to make sure to ask any hosts or conference organizers to use their social media accounts to share materials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all, this was the first conference talk and the longer tutorial-type talk I've given, and I think it went really well! We did a lot of things right and got some good ideas talks in general and where to take the tutorial in future iterations.&lt;/p&gt;
&lt;h3&gt;Ride the Lightning&lt;/h3&gt;
&lt;p&gt;After staying for the lightning talks on day 2, the conference seemed small and comfortable enough for me to give my own lightning talk on day 3. I decided I would go for it and went home and put together a few slides on all the dumb* things I had been building in my free time and what I had learned from doing them. I was mostly driven by the thought that other people may be building these dumb things but might be intimidated about sharing them. However, the world can use more dumb things, there's already enough practical* things out there. And sometimes dumb* things turn into big things that are really cool!&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Lightning talk ⚡️Keep building dumb things by &lt;a href="https://twitter.com/CrassValidation"&gt;@CrassValidation&lt;/a&gt; &lt;a href="https://t.co/wqqCr0Rf3A"&gt;pic.twitter.com/wqqCr0Rf3A&lt;/a&gt;&lt;/p&gt;&amp;mdash; PyData Carolinas (@pydatacarolinas) &lt;a href="https://twitter.com/pydatacarolinas/status/776882131201122309"&gt;September 16, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h3&gt;On Speaking&lt;/h3&gt;
&lt;p&gt;Public speaking to me is like running: I don't feel particularly good at it, but I feel like I should do it anyway. I started running because I was compelled by the &lt;a href="http://www.brainrules.net/exercise"&gt;research&lt;/a&gt; on what running does to improve the brain. Much like I have a body built for sitting and not running, I think I have a brain built for listening rather than presenting. But a lot of people I admire both run and speak, so I figure they must be doing something right and I should emulate those behaviors.&lt;/p&gt;
&lt;p&gt;I take a lot of inspiration from BoJack:
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/R2_Mn-qRKjA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content><category term="python"></category><category term="conference"></category></entry><entry><title>On Writing with Accuracy</title><link href="/steven-pinker-sense-of-style.html" rel="alternate"></link><published>2016-02-24T13:53:00-05:00</published><updated>2016-02-24T13:53:00-05:00</updated><author><name>Peter Baumgartner</name></author><id>tag:None,2016-02-24:/steven-pinker-sense-of-style.html</id><summary type="html">&lt;p&gt;A writing reminder&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;As Thomas and Turner explain, "Accuracy becomes pedantry if it is indulged for its own sake. A classic writer will phrase a subordinate point precisely but without the promise that it is technically accurate. The convention between writer and the reader is that the writer is not to be challenged on these points because they are mere scaffolding." Any adversary who is unscrupulous enough to give the least charitable reading to an unhedged statement will find an opening to attack the writer in a thicket of hedged ones anyway.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&lt;strong&gt;Steven Pinker - The Sense of Style&lt;/strong&gt; p. 44&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I frequently struggle with the confidence to write something technical without a full and complete understanding of all the nuance of a concept. I am a harsh judge of my own understanding, too. Most of my hesitancy comes from imagined scenarios of experts calling me out the accuracy of my statements, which is both unlikely and (by the above statement) pedantic. I should consider this: if my intent is to inform, and I've done enough research to use the concept I'm trying to explain, then I should be comfortable with the knowledge I have and proceed with writing. The likelihood that a reader's knowledge on the whole will be improved, rather than harmed, is assumed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Progress, not perfection.&lt;/em&gt;&lt;/p&gt;</content><category term="writing"></category></entry><entry><title>Creating Slack Slash Commands with Python and Flask: Part 1</title><link href="/slack-commands-with-python-and-flask.html" rel="alternate"></link><published>2016-01-18T07:05:00-05:00</published><updated>2016-01-18T07:05:00-05:00</updated><author><name>Peter Baumgartner</name></author><id>tag:None,2016-01-18:/slack-commands-with-python-and-flask.html</id><summary type="html">&lt;p&gt;Getting started with writing a Slack slash command&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Part 1: Setting Up Our Workflow and a Simple Application&lt;/h2&gt;
&lt;p&gt;A few weekends ago my pet project was to set up a drive time slash command in Slack. Searching through our organization's Slack conversation history, on top of overhearing several conversations, it seems like traffic is both a source of anguish and a favorite topic for smalltalk in our office.&lt;/p&gt;
&lt;p&gt;With that in mind, I set out to create a Slash Command for our Slack team. The end product was a slash command command that returned real time traffic and drive time data from the Google Directions API to Slack.&lt;/p&gt;
&lt;p&gt;The process was a bit arduous, especially for a relative web development newbie. There’s quite a bit to understand for all the pieces to come together, so I thought I would document a the process to help out other Slackers looking to create custom Slack commands. In addition, I’ll walk through some of the debugging and problem solving I did while creating an app. We won't be replicating the &lt;code&gt;/drive&lt;/code&gt; command, but be working with something more simple for the purposes of this example.&lt;/p&gt;
&lt;h3&gt;Final Product for the Complete Tutorial&lt;/h3&gt;
&lt;p&gt;When we're done with the complete tutorial we will have created a slash command for Slack that allows a user to get information on expected rainfall rain at a specified location. Our final command will be &lt;code&gt;/rain&lt;/code&gt;, but we'll be making a simple &lt;code&gt;/hello&lt;/code&gt; command for this part of the tutorial.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Python 3.x (It will probably work on 2.x as well)&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;A text editor (I used Sublime Text 2, but am starting to love Atom)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; for testing our application&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.forecast.io/"&gt;forecast.io&lt;/a&gt; API Key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic command line familiarity&lt;/li&gt;
&lt;li&gt;Basic python skills (package installation, basic syntax)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Notes&lt;/strong&gt;: I built this on OSX, so some language or operations may be OS specific.&lt;/p&gt;
&lt;h2&gt;Setting up a Workflow&lt;/h2&gt;
&lt;p&gt;Let’s create a simple “Hello World” Flask app to understand the foundational structure of a Flask application. As we do so, we'll walk through the steps of a workflow that will allow us to test our application from within Slack.&lt;/p&gt;
&lt;h3&gt;Creating a Flask App&lt;/h3&gt;
&lt;p&gt;Create a new folder for your application and inside of it create a new python file -- &lt;code&gt;hello.py&lt;/code&gt; will work. Insert the following code into that file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Slack!&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is actually our entire application. Let's take a look at one block at a time to understand the code.&lt;/p&gt;
&lt;h4&gt;Importing Flask &amp;amp; Creating an Application Object&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this step we're importing the required libraries. We're importing the &lt;code&gt;Flask&lt;/code&gt; class from the &lt;code&gt;flask&lt;/code&gt; package, as well as the &lt;code&gt;os&lt;/code&gt; package, which we'll need later in our code.&lt;/p&gt;
&lt;p&gt;We're also creating an application object named &lt;code&gt;app&lt;/code&gt; from the &lt;code&gt;Flask&lt;/code&gt; class. Don't worry about the &lt;code&gt;__name__&lt;/code&gt; parameter for the Flask object, if you're really curious &lt;a href="http://flask.pocoo.org/docs/0.10/api/"&gt;here's some detail&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Defining Routing and Request Methods&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello Slack!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the functional meat of our application so let's break it down. &lt;code&gt;@app.route()&lt;/code&gt; is a function decorator -- it basically modifies something about the next function we're going to declare. The first parameter to this decorator is &lt;code&gt;'/hello'&lt;/code&gt;. This parameter is critically important: it defines what happens when someone goes to the URL &lt;code&gt;http://www.oururl.com/hello&lt;/code&gt;. The second parameter is &lt;code&gt;methods=['POST']&lt;/code&gt;. This is telling us that we are only going to accept POST requests at this route.&lt;/p&gt;
&lt;p&gt;The idea of requests were a bit perplexing to me at first so I'll try and briefly explain. At the most basic level, communication on the internet mostly exists between clients and servers (there's actually a good Simple Wikipedia article on &lt;a href="https://simple.wikipedia.org/wiki/Client-server"&gt;this&lt;/a&gt;). For example: when you're surfing the web, you're actually making a &lt;code&gt;GET&lt;/code&gt; request as a client to the server in order to view a webpage. This request tells a website or application to "give the client some information". For this current page that information is HTML and some other files that are then interpreted by your web browser and displayed. &lt;code&gt;POST&lt;/code&gt; requests tell a site or application that it will be receiving information at that URL. That is: instead of a website or application sending something, the application will receive something. In our case, our application is going to receive the &lt;code&gt;POST&lt;/code&gt; request from Slack, and that request will contain some information which our application can use.&lt;/p&gt;
&lt;p&gt;Finally we define the &lt;code&gt;hello()&lt;/code&gt; function, which defines what happens when someone uses our &lt;code&gt;/hello&lt;/code&gt; route. In this case, all we're going to do is return a string to them that says &lt;code&gt;Hello Slack!&lt;/code&gt; if a request is made.&lt;/p&gt;
&lt;h4&gt;Declaring the Application Port&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This last chunk does something simple: when you run this program (and it's the &lt;a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"&gt;main program&lt;/a&gt;), find the port of &lt;code&gt;5000&lt;/code&gt;, and then finally serve the application locally using that port.&lt;/p&gt;
&lt;h3&gt;Testing our Application with ngrok&lt;/h3&gt;
&lt;p&gt;Our application should be ready to test. Open terminal and navigate to your project folder, and type &lt;code&gt;python hello.py&lt;/code&gt; to start our program. Terminal should pop up some information about where the server is running and that the debugger is active. Now we have to test our application.&lt;/p&gt;
&lt;p&gt;This was a step that actually stumped me for a while. Previously, I had built applications or websites that only accepted &lt;code&gt;GET&lt;/code&gt; requests. In this case, we can test it locally by just running the python file we created and browsing to &lt;code&gt;http://localhost:5000/hello&lt;/code&gt; and we can see our application. If we did that now with our application, we'll get a nice Method Not Allowed page since our application only accepts post requests.&lt;/p&gt;
&lt;p&gt;We could send &lt;code&gt;POST&lt;/code&gt; requests from our computer to our application locally using &lt;code&gt;curl&lt;/code&gt;, but that's more work than just loading a page in a browser and, more importantly, we would have to put some effort into making sure our request was in the same format as it would come from Slack. Additionally, our request won't be coming from our local computer to our local server, it will be coming from wherever the Slack server is to our server. Because of that, we can't use &lt;code&gt;localhost&lt;/code&gt; for testing with Slack, since &lt;code&gt;localhost&lt;/code&gt; (relative to Slack, which is sending the request) is where the Slack server is, and it doesn't have our application files.&lt;/p&gt;
&lt;p&gt;Luckily, there's a fantastic application called &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; that allows us to create a public URL to access a local server. We can use this to host our application locally, then point our Slack application to the public URL generated by ngrok. Using ngrok is fairly simple: download the file, open a shell to where you downloaded the file (or take this time to add it to your path), and type &lt;code&gt;ngrok http 5000&lt;/code&gt; in the shell. You should now see something like this in your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok by @inconshreveable

Tunnel Status                 online
Version                       &lt;span class="m"&gt;2&lt;/span&gt;.0.19/2.0.19
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://c654a618.ngrok.io -&amp;gt; localhost:5000
Forwarding                    https://c654a618.ngrok.io -&amp;gt; localhost:5000

Connections                   ttl     opn     rt1     rt5     p50     p90
                            &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00    &lt;span class="m"&gt;0&lt;/span&gt;.00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we were accepting &lt;code&gt;GET&lt;/code&gt; requests in our app, we could now head to the URLs above and view our page. However, if we go there now, nothing will happen since we're only accepting &lt;code&gt;POST&lt;/code&gt; requests.&lt;/p&gt;
&lt;h3&gt;Adding our Slash Command to Slack&lt;/h3&gt;
&lt;p&gt;To add a slash command integration to your Slack channel, head to https://slack.com/apps, then navigate to &lt;em&gt;Browse apps &amp;gt; Custom Integrations &amp;gt; Slash Commands&lt;/em&gt; and click the &lt;em&gt;Add Configuration&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;Our slash command for our example will start as &lt;code&gt;/hello&lt;/code&gt;. Type that in and click &lt;em&gt;Add Slash Command Configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After then, we have some options to configure on our app. The &lt;strong&gt;URL&lt;/strong&gt; field is critical here. We're going to paste the URL that &lt;code&gt;ngrok&lt;/code&gt; gave us, being sure to append &lt;code&gt;/hello&lt;/code&gt; at the end. That means our URL should be something similar to: &lt;code&gt;http://c654a618.ngrok.io/hello&lt;/code&gt;. The integration settings should match below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Displaying the Response" src="/assets/integrationsettings.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;Now we can save our integration, head to a Slack channel (I prefer DMs with slackbot), and type &lt;code&gt;/hello&lt;/code&gt; into the chat. We should see a response of "Hello Slack!" immediately after.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Displaying the Response" src="/assets/helloslack.png" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should also notice the requests popping up in the &lt;code&gt;ngrok&lt;/code&gt; Terminal window every time you issue the command.&lt;/p&gt;
&lt;h3&gt;In Summary&lt;/h3&gt;
&lt;p&gt;Using Python, Flask, and ngrok we developed and tested a simple Flask application that responds to the &lt;code&gt;/hello&lt;/code&gt; command in Slack.&lt;/p&gt;
&lt;p&gt;Some key ideas that took me a while to comprehend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URLs accept multiple kinds of requests: &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; are the most common&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; says: "give me some information"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt; says: "I'm giving you information"&lt;/li&gt;
&lt;li&gt;We can't test complex &lt;code&gt;POST&lt;/code&gt; requests easily using &lt;code&gt;localhost&lt;/code&gt;. Fortunately, we can use &lt;code&gt;ngrok&lt;/code&gt; to get a public URL for a server we're running locally and send it &lt;code&gt;POST&lt;/code&gt; requests from Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next Time&lt;/h3&gt;
&lt;p&gt;In the next part (&lt;em&gt;Creating Slack Slash Commands with Python and Flask: Part 2: Electric Bugaloo&lt;/em&gt;), we'll extend our app to use a weather API that returns some information about expected rainfall. We'll also work to better understand how Slack sends requests to our app and what information is contained in a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="slack"></category><category term="programming"></category></entry></feed>